/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-17 08:09:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.serviceCenter;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\t<title> Table Row Toggel </title>\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"custom.css\">\r\n\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\">\r\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"></script>\r\n\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"></script>\r\n\t\r\n</head>\r\n\r\n\r\n<style>\n\r\n/* .table tr {\r\n    cursor: pointer;\r\n} */\r\n/* .table{\r\n\tbackground-color: #fff !important;\r\n} */\r\n .main-section{\r\n\tmargin-top: 120px;\r\n} \r\n/*  .hiddenRow {\r\n   /*  padding: 0 4px !important; */\r\n    background-color: #eeeeee;\r\n}  */\r\n\r\n.hide{\r\n\tdisplay : none;\r\n\twidth : 900px;\r\n\theight : 150px;\r\n\tbackground : red;\r\n}\r\n\r\n.show {\r\n  \twidth : 900px;\r\n\theight : 150px;\r\n\tbackground : blue;\r\n}\r\n\n</style>\r\n");
      out.write("<body>\r\n\t<div class=\"container main-section\">\r\n\t\t<div class=\"row\">\r\n\t\t\t\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<table class=\"table table-bordered\" style=\"border-collapse:collapse; text-align : center;\">\r\n\t\t\t\t    <thead>\r\n\t\t\t\t        <tr>\r\n\t\t\t\t            <th>No.</th>\r\n\t\t\t\t            <th>내용</th>\r\n\t\t\t\t            <th>등록날짜</th>\t\r\n\t\t\t\t        </tr>\r\n\t\t\t\t    </thead>\r\n\t\t\t\t    <tbody>\r\n\t\t\t\t    ");
for(int i=5; i>0; i--){ 
      out.write("\r\n\t\t\t    \t\t<tr data-toggle=\"collapse\" data-target=\"#demo");
      out.print(i );
      out.write("\" class=\"accordion-toggle\">\r\n\t\t\t\t            <td>");
      out.print(i );
      out.write("</td>\r\n\t\t\t\t            <td>title들어가는부분</td>\r\n\t\t\t\t            <td>날짜 들어가는 부분</td>\r\n\t\t\t\t        </tr>\r\n\t\t\t\t        <tr class=\"p hide\">\r\n\t\t\t\t            <td colspan=\"3\" >\r\n\t\t\t\t\t            <div class=\"accordian-body collapse p-3\" id=\"demo");
      out.print(i);
      out.write("\">\t\t\t\t\t            \t\r\n\t\t\t\t\t            \t내용들어가는부분<br>\r\n\t\t\t\t\t            \t\r\n\t\t\t\t\t        \t</div> \r\n\t\t\t\t        \t</td> \r\n\t\t\t\t        </tr>\r\n\t\t\t\t        ");
} 
      out.write("\r\n\t\t\t\t    </tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n<script>\r\n/* $('.accordion-toggle').click(function(){\r\n\t$('.hide').hide();\r\n\t$(this).next('tr').find('.hide').show();\r\n}); */\r\n\r\n\r\n $(function() {\r\n\tvar article = (\".accordion-toggle .show\");\t// 클래스가.accordion-toggle인것 중에 클래스가show인 객체\r\n\r\n\t$(\".accordion-toggle td\").click(function() {\r\n\t\t\r\n\t\t\r\n\t\tvar myArticle = $(this).parents().next(\"tr\");\t// 숨겨져있는 부분\r\n\r\n\t\tif ($(myArticle).hasClass('hide')) {\r\n\t\t\t$(article).removeClass('show').addClass('hide');\r\n\t\t\t$(myArticle).removeClass('hide').addClass('show');\r\n\t\t} else {\r\n\t\t\t$(myArticle).addClass('hide').removeClass('show');\r\n\t\t}\r\n\t});\r\n}); \r\n</script>\r\n\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
